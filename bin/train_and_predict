#!/usr/bin/env python

import numpy as np
import argparse
import json

def codec_api_design(xml_fn, match_fn):
    part = load_musicxml(xml_fn)

    perf_part, alignment = load_match(match_fn)

    targets, snote_ids = perf_codec.encode(part, perf_part, alignment)

    basis = make_basis(part, snote_ids)

    # reconstruction
    perf_part_rec = perf_codec.decode(part, targets, snote_ids)

    # generation
    snote_ids = [n.id for n in part.notes_tied]

    perf_part_gen = perf_codec.decode(part, targets, snote_ids)


from basismixer import PerformanceCodec, make_basis, BASIS_CONFIG_EXAMPLE

def main():

    basis_config = json.load(open(BASIS_CONFIG_EXAMPLE)) # dictionary
    # model_config # dictionary
    pcodec = PerformanceCodec()

    train_X = []
    train_Y = []
    train_pieces
    for xml_fn, match_fn in train_pieces:

        part = load_musicxml(xml_fn)
        unused_part, performance_part, alignment = load_match(match_fn)
    
        # snotes: list of target-relevant snote attributes for all matched snotes
        # notes: list of target-relevant note attributes for all matched notes
        # snote_idx: indices of matched snotes in part
        snote_idx, note_idx = extract_matching_notes(alignment)
        snotes = extract_snote_attributes(part, snote_idx)
        notes = extract_note_attributes(performance_part, note_idx)

        basis = make_basis(part, snote_idx)
        targets = pcodec.encode(snotes, notes)

        train_X.append(basis)
        train_Y.append(targets)
        
    model = train_model(model_config, train_X, train_Y)

    for xml_fn in test_pieces:

        part = load_musicxml(xml_fn)
        basis = make_basis(part, None)
        snotes = extract_snote_attributes(part, None)
        predicted_targets = model.predict(basis)
        predicted_performance_part = pcodec.decode(snotes, predicted_targets)                                                                                                                                          

    
if __name__ == '__main__':
    main()
